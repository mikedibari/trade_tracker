name: Trade Tracker App Django Pipeline

# Set up how the workflow is triggered
on:

  # Trigger the workflow on push or pull request events on the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allow triggering this workflow manually from the Actions tab
  workflow_dispatch:

# Set up the job for this workflow
jobs:
  # This workflow contains a single job that we are calling "build-and-test"
  build-and-test:

    # The runner environment to use
    runs-on: ubuntu-latest

    # Steps mostly contain CLI commands (via "run") and actions (via "uses")
    # Each step begins with a hyphen -
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # You can optionally provide a name before a step. This is an example of an unnamed step.
      - uses: actions/checkout@v2

      # Runs a single echo command using the runners shell
      - run: echo Entering Trade Tracker Django CI/CD Pipeline!
      
      # Uses the action setup-python@v2, specifying version 3.10.5
      # This installs Python 3.9 to the runner environment
      - name: Set up Python 3.10.5
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.5   
          
      # Runs a set of commands to install dependencies in the runner environment
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      # Sets up access to API_KEY
      - name: Set up environment variables
        env:
          API_KEY: ${{ secrets.API_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          printenv
          
      # todo -- expose local PostgreSQL database running in a Docker container to GitHub Actions using localtunnel, or use dummy db and settings_github.py     
      # Runs database migrations on the Django app
#       - name: Run migrations
#         run: python manage.py migrate
      
      # Run all tests with verbose flag
#       - name: Run all tests
#         run: pytest -v
